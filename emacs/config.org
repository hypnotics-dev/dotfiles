
* Emacs
General emacs configuration.
** Init
Early configuration options for emacs
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))

  (require 'package)


  (setq package-archives '(
                           ("melpa". "https://melpa.org/packages/"  )
                           ("org"  . "https://orgmode.org/elpa/"    )
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; For non linux
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Gui
Configuration GUI elements
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1) ;Disable visible scrollbar
  (tool-bar-mode -1)   ;Disable the toolbar
  (tooltip-mode -1)    ;Disable tooltips
  (set-fringe-mode 10) ;Gives breathing room ?? maybe adjust
  (menu-bar-mode 0)    ;the top level menu bar

  (use-package all-the-icons)
  (auto-revert-mode) ;; allow for the buffer to display the most accurate representation of a file

  (column-number-mode) ;;collum number in modeline
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t) ;; static line numbers

  ;; disable line numbers for these buffer types
  (dolist (mode '(org-mode-hook ;; maybe change
                  term-mode-hook ;; a terminal maybe change
                  eshell-mode-hook
                  nov-mode-hook)) ;; add relative line numbers when necessary
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

  (tab-bar-mode)

  


#+end_src

** Font
Configuration for fonts and faces
#+begin_src emacs-lisp

    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono")

    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode)
      :hook (org-mode  . rainbow-delimiters-mode))

    (use-package hl-todo)

    (setq hl-todo-keyword-faces ;; Add hl-todo-mode hook to org-mode
          '(("TODO"   . "#02FF38")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF")))

  (global-hl-todo-mode)
#+end_src

** Variable
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
  (setq epg-gpg-program "gpg2")
#+end_src

* Org
** Org
** Agenda
** Org Roam
** Org Ql
** Orgit
** TODO [0%]
* Git
Magit, a git client for emacs and forge a git instance tool.

| Command | Key | Purpose |
|         |     |         |

#+begin_src emacs-lisp
  (use-package magit)

  (use-package forge
    :after magit)

  (use-package git-modes
    :after magit)

#+end_src
** TODO [0%]
- [ ] Make sure evil collection works on magit, forge and git-modes
- [ ] Make sure gpg aut works well, i.e type password once per several hours or server lifetime?
*** Add docs [0%]
- [ ] Common keys to acces magit in emacs
- [ ] Keys for forge
- [ ] Keys for accessing git modes files
* Mail
* Latex
* Markdown
* Dirvish

Dirvish is an improved version of the Emacs inbuilt package Dired. It not only gives Dired an appealing and highly customizable user interface, but also comes together with almost all possible parts required for full usability as a modern file manager.

#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries
     '(("h" "~"                 "Home")
       ("d" "~/stuff/downloads" "Downloads")
       ))
    :config
    (setq dirvish-attributes
          '(vc-state file-size file-time all-the-icons))
    (setq dirvish-use-header-line 'global)
    (setq dirvish-preview-dispatchers
          (cl-substitute 'pdf-preface 'pdf dirvish-preview-dispatchers))
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    :bind
    (("C-c f" . dirvish-fd)
     :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("h"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump))
    )
#+end_src

** TODO [0%]
- [0%] Setup quick access entries
  - [ ] Org Files
  - [ ] Novels
  - [ ] Uni
  - [ ] Config File
  - [ ] Dev Org files
- [ ] Setup keymap to work with evil collection

** Dependecies
*** Elsip packages
Depends on PDF Tools for pdf thumbnails
*** System packages 
**** Arch
- poppler
- mediainfo
- ffmpegthumbnailer
- imagemagick
- [[https://raw.githubusercontent.com/marianosimone/epub-thumbnailer/master/src/epub-thumbnailer.py][epub-thumbnail]] (need to add to ~/.local/bin remove .py and chmod 700)
  
* Term
* PDF
** TODO [0%]
- [ ] Add PDF Tools
  - [ ] Configure vi binds for pdf
- [ ] Add package to restore to last used location
* hledger
* Irc
* Elfeed
* Dashboard
* Modeline
* Cheatsheet
* Smartparens
* Keys
