* Introduction
Packages used by this config.
- All the Icons
- Hl TODO
- Org Roam
- Orgit
- Orgit Forge
- Org QL
- Org Super Agenda
- Magit
- Forge
- Git Modes
- Smartparens
- Dirvish
- Restart Emasc
- hledger
- speedtypes
- fireplace
- evil
- evil collections
- hydra
- general
- Dimmer
- Dashboard
- Doom Modeline
- wttrin
- cheatsheet
- Elfeed
- mu4e
- circe
- vertico
- marginal
- consult
- ace-link?
- avy?
- presient.el
- org-noter
- toc-org
- dslide?
- emacs-markdownfmt?
- grip-mode
- Auctex?
- mu4e-alert
- eradio
- org-alert
* Emacs
General emacs configuration.
** Init
Early configuration options for emacs
#+begin_src emacs-lisp
  (eval-when-compile
    (require 'use-package))

  (require 'package)


  (setq package-archives '(
                           ("melpa". "https://melpa.org/packages/"  )
                           ("org"  . "https://orgmode.org/elpa/"    )
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; For non linux
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Gui
Configuration GUI elements
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)
  (setq visible-bell t)

  (scroll-bar-mode -1) ;Disable visible scrollbar
  (tool-bar-mode -1)   ;Disable the toolbar
  (tooltip-mode -1)    ;Disable tooltips
  (set-fringe-mode 10) ;Gives breathing room ?? maybe adjust
  (menu-bar-mode 0)    ;the top level menu bar

  (use-package all-the-icons)
  (auto-revert-mode) ;; allow for the buffer to display the most accurate representation of a file

  (column-number-mode) ;;collum number in modeline
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t) ;; static line numbers

  ;; disable line numbers for these buffer types
  (dolist (mode '(org-mode-hook ;; maybe change
                  nov-mode-hook)) ;; add relative line numbers when necessary
    (add-hook mode (lambda() (display-line-numbers-mode 0))))

  (tab-bar-mode)

  


#+end_src

** Help
Better emacs help system
#+begin_src emacs-lisp

  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command]  . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol]   . helpful-symbol)
    ([remap describe-key]      . helpful-key))

#+end_src
** Font
Configuration for fonts and faces
#+begin_src emacs-lisp

    (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font Mono")

    (use-package hl-todo)

    (setq hl-todo-keyword-faces ;; Add hl-todo-mode hook to org-mode
          '(("TODO"   . "#02FF38")
            ("FIXME"  . "#FF0000")
            ("DEBUG"  . "#A020F0")
            ("GOTCHA" . "#FF4500")
            ("STUB"   . "#1E90FF")))

  (global-hl-todo-mode)
#+end_src

** Variable
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg"))
  (setq epg-gpg-program "gpg2")
#+end_src

* Org
Org mode is a formatted plain text writter.

#+begin_src emacs-lisp

  (use-package visual-fill-column)

  (defun hyp-org-mode-setup ()
    (org-indent-mode)
    (visual-line-mode 1)
    (auto-fill-mode 1)
    (visual-fill-column-mode 1)
    (setq visual-fill-column-width 175 ;; n char of writing room
          visual-fill-column-center-text 1))

  (use-package org
    :hook (org-mode . hyp-org-mode-setup)
    :config
    (setq org-ellipsis " â–¾")
    (setq org-log-done 'time)
    (setq org-log-into-drawer t) ; 
    (setq org-checkbox-hierarchical-statistics nil)
    (setq org-agenda-files '(
                             "~/org/"
                             "~/stuff/org/task.org"
                             "~/uni/"
                             )))
#+end_src

** Agenda

#+begin_src emacs-lisp

  (setq org-agenda-start-with-log-mode t) ;; create a log of tasks 
  (use-package org-super-agenda)
  ;; (org-super-agenda-mode 1)

#+end_src

** Babel
Used for code/src blocks in org mode

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C          . t)
     (shell      . t)
     (lua        . t)
     (latex      . t)
     (makefile   . t)))

  (setq org-confirm-babel-evaluate nil) ;; no confirmations on running code

  (require 'org-tempo)


  ;; Is there a better way to do this?
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("cc" . "src C"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("mk" . "src makefile"))
  (add-to-list 'org-structure-template-alist '("ll" . "src lua"))
  (add-to-list 'org-structure-template-alist '("lx" . "src latex"))
  (add-to-list 'org-structure-template-alist '("sq" . "src sql"))

#+end_src

** Org Roam
A Zettlekan system for emacs org mode.

#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/org"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

#+end_src

** Org Ql
Query org files with a query language

#+begin_src emacs-lisp
  (use-package org-ql)
#+end_src

** Orgit
Linking git repos and forge instances inside of org mode.

#+begin_src emacs-lisp
  (use-package orgit)
  (use-package orgit-forge)
#+end_src

** Commands
| Command | key | Purpose |
|         |     |         |

** TODO [11%]
- [X] Determine if log into drawer is nessecerary
- [ ] Determine if agenda start with log mode is needed
- [ ] Build out org-agenda workflow
- [ ] Configure org-super-agenda
- [ ] Configure roam some more
- [ ] Add a way to autoconfigure gitconfigure orgit atributes (like in the readme)
- [ ] Add a function to create a org feature to declare file as a document (margins,fonts and such)
- [ ] Create a template system and a template manager
- [ ] Configure Org Keymap
   
* Git
Magit, a git client for emacs and forge a git instance tool.


#+begin_src emacs-lisp
  (use-package magit)

  (use-package forge
    :after magit)

  (use-package git-modes
    :after magit)

#+end_src

** Commands
| Command | Key | Purpose |
|         |     |         |

** TODO [0%]
- [ ] Make sure evil collection works on magit, forge and git-modes
- [ ] Make sure gpg aut works well, i.e type password once per several hours or server lifetime?
- [ ] Verify if system crafters magit configuration should be implemented
- [0%] Add docs 
  - [ ] Common keys to acces magit in emacs
  - [ ] Keys for forge
  - [ ] Keys for accessing git modes files
** Dependencies
- git (for magit)
- GnuPG (for decrypting authinfo file)
* Mail
* Latex
* Markdown
* Dirvish

Dirvish is an improved version of the Emacs inbuilt package Dired. It not only gives Dired an appealing and highly customizable user interface, but also comes together with almost all possible parts required for full usability as a modern file manager.

#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :custom
    (dirvish-quick-access-entries
     '(("h" "~"                 "Home")
       ("d" "~/stuff/downloads" "Downloads")
       ))
    :config
    (setq dirvish-attributes
          '(vc-state file-size file-time all-the-icons))
    (setq dirvish-use-header-line 'global)
    (setq dirvish-preview-dispatchers
          (cl-substitute 'pdf-preface 'pdf dirvish-preview-dispatchers))
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    :bind
    (("C-c f" . dirvish-fd)
     :map dirvish-mode-map ; Dirvish inherits `dired-mode-map'
     ("a"   . dirvish-quick-access)
     ("f"   . dirvish-file-info-menu)
     ("y"   . dirvish-yank-menu)
     ("N"   . dirvish-narrow)
     ("^"   . dirvish-history-last)
     ("h"   . dirvish-history-jump) ; remapped `describe-mode'
     ("s"   . dirvish-quicksort)    ; remapped `dired-sort-toggle-or-edit'
     ("v"   . dirvish-vc-menu)      ; remapped `dired-view-file'
     ("TAB" . dirvish-subtree-toggle)
     ("M-f" . dirvish-history-go-forward)
     ("M-b" . dirvish-history-go-backward)
     ("M-l" . dirvish-ls-switches-menu)
     ("M-m" . dirvish-mark-menu)
     ("M-t" . dirvish-layout-toggle)
     ("M-s" . dirvish-setup-menu)
     ("M-e" . dirvish-emerge-menu)
     ("M-j" . dirvish-fd-jump))
    )
#+end_src

** TODO [0%]
- [0%] Setup quick access entries
  - [ ] Org Files
  - [ ] Novels
  - [ ] Uni
  - [ ] Config File
  - [ ] Dev Org files
- [ ] Setup keymap to work with evil collection

** Dependecies
*** Elsip packages
Depends on PDF Tools for pdf thumbnails
*** System packages 
**** Arch
- poppler
- mediainfo
- ffmpegthumbnailer
- imagemagick
- [[https://raw.githubusercontent.com/marianosimone/epub-thumbnailer/master/src/epub-thumbnailer.py][epub-thumbnail]] (need to add to ~/.local/bin remove .py and chmod 700)
  
* Term
* PDF
** TODO [0%]
- [ ] Add PDF Tools
  - [ ] Configure vi binds for pdf
- [ ] Add package to restore to last used location
* hledger
* Irc
* Elfeed
* Dashboard
* Modeline
* Cheatsheet
* Smartparens
* Keys
Emacs Keymaping with evil and general
** Evil
Emacs VI Layer, Vim keybinds inside of emacs

#+begin_src emacs-lisp

  (defun hyp/evil-hook ()
    (dolist (mode '(custom-mode
                    git-rebase-mode
                    nov-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init

    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-redo)

    :hook (evil-mode . hyp/evil-hook)
    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init '(calendar
                            dired
                            calc
                            ediff
                            elfeed
                            magit
                            forge
                            mu4e
                            org
                            org-roam
                            eshell
                            apropos
                            consult
                            dashboard
                            flymake
                            mu4e
                            mu4e-conversation
                            tab-bar
                            vertico))) 

#+end_src

** Keymaps
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)
    (general-create-definer hyp/leader-keys
      :keymaps '(normal insert visual)
      :prefix "SPC"
      :global-prefix "C-SPC"))

  (use-package hydra)
#+end_src

*** Prefix key mapping
#+begin_src emacs-lisp

#+end_src

*** General keymaps
#+begin_src emacs-lisp

#+end_src

*** hydras
Increase or decrease text
#+begin_src emacs-lisp
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("k" text-scale-increase 1 "in")
    ("j" text-scale-decrease 1 "out")
    ("f" nil "finished" :exit t))
#+end_src

#+begin_src emacs-lisp

#+end_src

** TODO [0%]
- [ ] Configure evil collection (add and remove supported modes)
- [ ] Implement the window hydra
- [ ] Add hydras for tedious and repetetive actions
  
